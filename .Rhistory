source('~/.active-rstudio-document')
install.packages(fda)
install.packages('fda')
install.packages('fda.usc')
library(dplyr)
read.table('lupustherm.txt')
data.raw <- read.table('lupustherm.txt')
thermograms.raw <- data.raw %>% select(1:451)
class.raw <- data.raw %>% select(452)
class.raw <- data.raw %>% select(452) %>% factor()
class.raw <- data.raw %>% select(452) %>% as.factor()
temperatures <- seq(45, 90, 0.1)
plot(temperatures, thermograms.raw[,1])
plot(temperatures, thermograms.raw[1,])
plot(temperatures, thermograms.raw[1,], type='l')
thermogram.length <- length(temperatures)
thermograms.raw <- data.raw %>% select(1:thermogram.length)
class.raw <- data.raw %>% select(-1:thermogram.length)
data.raw <- read.table('lupustherm.txt')
temperatures <- seq(45, 90, 0.1)
thermogram.length <- length(temperatures)
thermograms.raw <- data.raw %>% select(1:thermogram.length)
class.raw <- data.raw %>% select(-1:thermogram.length)
class.raw <- data.raw %>% select(-(1:thermogram.length))
samples.n <- dim(data.raw)[1]
for(i in 2:samples.n) lines(temperatures, thermograms.raw[i,])
plot(temperatures, thermograms.raw[1,], type='l', ylim = c(-0.1, 1))
cols = rainbow(samples.n)
plot(temperatures, thermograms.raw[1,], type='l', ylim = c(-0.1, 0.5), color=cols[1])
for(i in 2:samples.n) lines(temperatures, thermograms.raw[i,], color=cols[i])
cols = rainbow(samples.n)
plot(temperatures, thermograms.raw[1,], type='l', ylim = c(-0.1, 0.5), color=cols[1])
plot(temperatures, thermograms.raw[1,], type='l', ylim = c(-0.1, 0.5), color=cols[1])
plot(temperatures, thermograms.raw[1,], type='l', ylim = c(-0.1, 0.5), color=cols[1])
warnings()
plot(temperatures, thermograms.raw[1,], type='l', ylim = c(-0.1, 0.5), col=cols[1])
for(i in 2:samples.n) lines(temperatures, thermograms.raw[i,], col=cols[i])
source('C:/Users/Robert/Dropbox/Northern Arizona University/Github_Repos/Thermogram_Toolkit/Data_Import_Cleaning.R')
source('C:/Users/Robert/Dropbox/Northern Arizona University/Github_Repos/Thermogram_Toolkit/Data_Import_Cleaning.R')
thermograms.raw <- data.raw %>% select(1:thermogram.length)
library(dplyr)
library(fda)
library(fda.usc)
data.raw <- read.table('lupustherm.txt')
temperatures <- seq(45, 90, 0.1)
thermogram.length <- length(temperatures)
samples.n <- dim(data.raw)[1]
thermograms.raw <- data.raw %>% select(1:thermogram.length)
class.raw <- data.raw %>% select(-(1:thermogram.length))
source('C:/Users/Robert/Dropbox/Northern Arizona University/Github_Repos/Thermogram_Toolkit/Data_Import_Cleaning.R')
source('C:/Users/Robert/Dropbox/Northern Arizona University/Github_Repos/Thermogram_Toolkit/Data_Import_Cleaning.R')
fdata(thermograms.raw, argvals=temperatures)
fdata.raw <- fdata(thermograms.raw, argvals=temperatures)
plot(fdata.raw)
install.packages("lubridate")
install.packages("fdANOVA")
create.bspline.basis(range=range(argvals), nbasis = thermogram.length+2)
create.bspline.basis(range=argvals, nbasis = thermogram.length+2)
### Choose a Basis
range(thremogram.length)
### Choose a Basis
range(thermogram.length)
### Choose a Basis
range(temperatures)
create.bspline.basis(range=range(temperatures), nbasis = thermogram.length+2)
full.spline <- create.bspline.basis(range=range(temperatures), nbasis = thermogram.length+2)
### We can tune from basis = 4 to length(argvals))
basis=4
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
### We can tune from basis = 4 to length(argvals))
basis=2
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
### We can tune from basis = 4 to length(argvals))
basis=1
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
### We can tune from basis = 2 to length(argvals))
basis=2
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
### We can tune from basis = 2 to length(argvals))
basis <- 2
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
### We can tune from basis = 2 to length(argvals))
basis <- 2
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
### We can tune from basis = 2 to length(argvals))
basis <- 250 ### Tuneable
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
### We can tune from basis = 2 to length(argvals))
basis <- 451 ### Tuneable
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
### We can tune from basis = 2 to length(argvals))
basis <- 450 ### Tuneable
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
fdata.smooth$data[,1]
cbind(fdata.smooth$data[,1], fdata.raw$data[,1])
basis <- 451 ### Tuneable
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
cbind(fdata.smooth$data[,1], fdata.raw$data[,1])
### We can tune from basis = 2 to length(argvals))
basis <- 250 ### Tuneable, if basis=length(arvals) then use raw.
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
cbind(fdata.smooth$data[,1], fdata.raw$data[,1])
basis <- 250 ### Tuneable, if basis=length(arvals) then use raw.
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
cbind(fdata.smooth$data[,1], fdata.raw$data[,1])
basis <- 125 ### Tuneable, if basis=length(arvals) then use raw.
reduced.basis.spline <- create.bspline.basis(range=range(temperatures), nbasis = basis+2)
Smoothing.Matrix <- S.basis(temperatures, basis=reduced.basis.spline)
fdata.smooth <- fdata.raw
fdata.smooth$data <- fdata.raw$data%*%Smoothing.Matrix
plot(fdata.smooth)
cbind(fdata.smooth$data[,1], fdata.raw$data[,1])
fdata.working <- fdata.smooth ### Working functional data set
toolkit.ws <- data.frame(Temperatuers = temperatures, X = fdata.working$data)
toolkit.ws <- data.frame(Class = class.raw, X = fdata.working$data)
toolkit.ws <- data.frame(Class = factor(class.raw), X = fdata.working$data)
View(class.raw)
table(class.raw)
str(class.raw)
class.raw <- data.raw %>% select(-(1:thermogram.length)) %>% as.vector() %>% factor()
class.raw <- data.raw %>% select(-(1:thermogram.length))
colnames(class.raw) <- 'Lupus'
class.raw$Lupus <- factor(class.raw$Lupus)
colnames(class.raw) <- 'SLE'
class.raw$SLE <- factor(class.raw$SLE)
library('penalizedLDA')
install.packages("penalizedLDA")
library('penalizedLDA')
toolkit.ws <- data.frame(Class = class.raw$SLE, X = fdata.working$data)
colnames(toolkit.ws) <- c('Class', temperatures)
x <- fdata.working$data
y <- class.raw$SLE
penalizedLDA::PenalizedLDA(x, y)
y <- class.raw
penalizedLDA::PenalizedLDA(x, y)
y <- class.raw$SLE
penalizedLDA::PenalizedLDA(x, y)
y <- as.numeric(class.raw$SLE)
penalizedLDA::PenalizedLDA(x, y)
penalizedLDA::PenalizedLDA(x=x, y=y)
table(y)
x <- fdata.working$data
x <- t(fdata.working$data)
y <- as.numeric(class.raw$SLE)
penalizedLDA::PenalizedLDA(x=x, y=y)
PenalizedLDA.cv(x=x, y=y)
fdata.working$data[,1]
fdata.working$data[1,]
t(fdata.working$data)[1,]
x <- t(fdata.working$data)
PenalizedLDA.cv(x=x[,2:3], y=y)
dim(x)
x <- fdata.working$data
dim(x)
PenalizedLDA.cv(x=x[,2:3], y=y)
PenalizedLDA.cv(x=x, y=y)
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y)
plot(penlda.cv.out)
lambda.seq <- exp(seq(-2, 2))
lambda.seq <- exp(seq(-2, 2, 0.2))
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambda=lambda.seq)
lambda.seq <- exp(seq(-2, 2, 0.2))
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambda=lambda.seq)
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq)
plot(penlda.cv.out)
lambda.seq <- exp(seq(-4, 2, 0.2))
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq)
plot(penlda.cv.out)
lambda.seq <- exp(seq(-6, 2, 0.2))
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq)
plot(penlda.cv.out)
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq, K = 10)
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq, nfolds = 10)
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq, nfold = 10)
plot(penlda.cv.out)
lambda.seq <- exp(seq(-6, 2, 0.02))
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq, nfold = 10)
plot(penlda.cv.out)
penlda.cv.out$bestlambda
library(MASS)
library(caret)
install.packages("caret")
penlda.cv.out$bestlambda
lambda.seq <- exp(seq(-6, 2, 0.05))
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq, nfold = 10)
plot(penlda.cv.out)
penlda.cv.out$bestlambda
caret::createFolds(class.raw$SLE)
x.test <- x[,fold.id]
y.test <- y[fold.id]
x.train <- x[,-fold.id]
y.train <- y[-fold.id]
set.seed(10)
caret::createFolds(class.raw$SLE)
fold.id <- 1
x.test <- x[,fold.id]
y.test <- y[fold.id]
x.train <- x[,-fold.id]
y.train <- y[-fold.id]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
folds.all <- caret::createFolds(class.raw$SLE)
set.seed(10)
folds.all <- caret::createFolds(class.raw$SLE)
fold.id <- 1
x.test <- x[,folds.all[[fold.id]]]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[,-folds.all[[fold.id]]]
y.train <- y[-folds.all[[fold.id]]]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
folds.all[[fold.id]]
x.train <- x[,-folds.all[[fold.id]]]
y.train <- y[-folds.all[[fold.id]]]
table(y.train)
### The start of a function
set.seed(10)
folds.all <- caret::createFolds(class.raw$SLE)
lambda.seq <- exp(seq(-6, 2, 0.01))  ### This could be an input, best to suggest evalauating this outide of functions.
fold.id <- 1
folds.all[[fold.id]]
x.test <- x[,folds.all[[fold.id]]]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[,-folds.all[[fold.id]]]
y.train <- y[-folds.all[[fold.id]]]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
penlda.cv.out <- PenalizedLDA.cv(x=x, y=y, lambdas=lambda.seq, nfold = 10)
set.seed(10)
folds.all <- caret::createFolds(class.raw$SLE)
lambda.seq <- exp(seq(-6, 2, 0.01))  ### This could be an input, best to suggest evalauating this outide of functions.
fold.id <- 1
folds.all[[fold.id]]
x.test <- x[folds.all[[fold.id]],]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[-folds.all[[fold.id]],]
y.train <- y[-folds.all[[fold.id]]]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
lambda.set <- penlda.cv.out$bestlambda
predict(penlda.cv.out, x.test)
predict.penlda(penlda.cv.out, x.test)
fold.id <- 1
folds.all[[fold.id]]
x.test <- x[folds.all[[fold.id]],]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[-folds.all[[fold.id]],]
y.train <- y[-folds.all[[fold.id]]]
predict.penlda(penlda.cv.out, x.test)
predict(penlda.cv.out, x.test)
penlda.out <- PenalizedLDA(x.train, y.train, lambda.set)
penlda.out <- PenalizedLDA(x.train, y.train, lambda=lambda.set)
penlda.out <- PenalizedLDA(x=x.train, y=y.train, lambda=lambda.set)
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
lambda.set <- penlda.cv.out$bestlambda
penlda.out <- PenalizedLDA(x=x.train, y=y.train, lambda=lambda.set)
penlda.out <- PenalizedLDA(x=x.train, y=y.train)
y.train
penlda.out <- PenalizedLDA(x=x.train, y=y.train, lambda=lambda.set, K=1)
predict(penlda.out, x.test)
penlda.out$discrim
penlda.out$y
penlda.out$
predict(penlda.out, x.test)==y.test
penlda.out$
which(predict(penlda.out, x.test)==y.test)
penlda.out$
penlda.preds <- predict(penlda.out, x.test)
penlda.preds
penlda.preds <- predict(penlda.out, x.test)
penlda.preds
penlda.preds$ypred
penlda.preds$ypred==y.test
mean(penlda.preds$ypred==y.test)
set.seed(10)
folds.all <- caret::createFolds(class.raw$SLE)
lambda.seq <- exp(seq(-6, 2, 0.01))  ### This could be an input, best to suggest evalauating this outide of functions.
acc <- vector()
for(fold.id in 1:folds.n)
{
x.test <- x[folds.all[[fold.id]],]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[-folds.all[[fold.id]],]
y.train <- y[-folds.all[[fold.id]]]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
lambda.set <- penlda.cv.out$bestlambda
penlda.out <- PenalizedLDA(x=x.train, y=y.train, lambda=lambda.set, K=1)
penlda.preds <- predict(penlda.out, x.test)
acc[fold.id] <- mean(penlda.preds$ypred==y.test)  ### There does not seem to be a way to get posterior probabilities, so we may not include this
}
folds.all <- caret::createFolds(class.raw$SLE, k = folds.n)
folds.n <- 10
folds.all <- caret::createFolds(class.raw$SLE, k = folds.n)
lambda.seq <- exp(seq(-6, 2, 0.01))  ### This could be an input, best to suggest evalauating this outide of functions.
acc <- vector()
for(fold.id in 1:folds.n)
{
x.test <- x[folds.all[[fold.id]],]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[-folds.all[[fold.id]],]
y.train <- y[-folds.all[[fold.id]]]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10)
lambda.set <- penlda.cv.out$bestlambda
penlda.out <- PenalizedLDA(x=x.train, y=y.train, lambda=lambda.set, K=1)
penlda.preds <- predict(penlda.out, x.test)
acc[fold.id] <- mean(penlda.preds$ypred==y.test)  ### There does not seem to be a way to get posterior probabilities, so we may not include this
}
boxplot(acc)
### Enforcing a fused penalty
set.seed(10)
folds.n <- 10
folds.all <- caret::createFolds(class.raw$SLE, k = folds.n)
lambda.seq <- exp(seq(-6, 2, 0.01))  ### This could be an input, best to suggest evalauating this outide of functions.
acc <- vector()
for(fold.id in 1:folds.n)
{
x.test <- x[folds.all[[fold.id]],]
y.test <- y[folds.all[[fold.id]]]
x.train <- x[-folds.all[[fold.id]],]
y.train <- y[-folds.all[[fold.id]]]
penlda.cv.out <- PenalizedLDA.cv(x=x.train, y=y.train, lambdas=lambda.seq, nfold = 10, type='ordered')
lambda.set <- penlda.cv.out$bestlambda
penlda.out <- PenalizedLDA(x=x.train, y=y.train, lambda=lambda.set, K=1, type='ordered')
penlda.preds <- predict(penlda.out, x.test)
acc[fold.id] <- mean(penlda.preds$ypred==y.test)  ### There does not seem to be a way to get posterior probabilities, so we may not include this
}
boxplot(acc)  ### Got about 72% mean test set accuracy in first run
source('C:/Users/Robert/Dropbox/Northern Arizona University/Github_Repos/Thermogram_Toolkit/Data_Import_Cleaning.R')
